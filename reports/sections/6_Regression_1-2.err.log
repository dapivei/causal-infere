Traceback (most recent call last):
  File "/ext3/miniforge3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/ext3/miniforge3/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/ext3/miniforge3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/ext3/miniforge3/lib/python3.12/asyncio/base_events.py", line 686, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/ext3/miniforge3/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/ext3/miniforge3/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/ext3/miniforge3/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Target function
def g(x):
    return x**2

# Modeling function
def f(x, beta_0, beta_1):
    return beta_0 + beta_1 * x

# Loss function
def loss(y, y_pred):
    return (y - y_pred)**2

# Closed-form solution
def closed_form_solution(x, y):
    beta_1 = (y.dot(x) - y.mean() * x.mean()) / ((x - x.mean())**2).sum()
    beta_0 = y.mean() - beta_1 * x.mean()
    return beta_0, beta_1

# Importing necessary libraries
import matplotlib.pyplot as plt
import numpy as np
from ipywidgets import interact, FloatSlider

# Function to update plot with boundaries
def update_plot(left_boundary, right_boundary, gap):
    # Generate data points within the specified boundary
    # x = np.linspace(left_boundary, right_boundary, gap)
    x = np.arange(left_boundary, right_boundary, gap)
    y = g(x)

    # Get closed-form solution for beta_0 and beta_1
    beta_0, beta_1 = closed_form_solution(x, y)

    # Calculate the predicted values
    y_pred = f(x, beta_0, beta_1)

    # Plot the target and modeling functions
    plt.figure(figsize=(8, 6))
    plt.plot(x, y, label='Target Function (g(x))')
    plt.plot(x, y_pred, label=f'Modeling Function (f(x, beta_0={beta_0:.2f}, beta_1={beta_1:.2f}))')
    plt.legend()
    plt.xlabel('x')
    plt.ylabel('y')
    plt.text(10, 10, f'f(x) = {beta_0:.2f} + {beta_1:.2f}x', fontsize=12, color='red')
    plt.text(0, 0, f'f(x) = x^2', fontsize=12, color='blue')
    plt.title('Target vs. Modeling Function')
    plt.grid(True)
    plt.show()

# Interactive sliders for setting boundaries
interact(update_plot,
         left_boundary=FloatSlider(min=-20, max=0, step=1, value=-10, description='Left Boundary'),
         right_boundary=FloatSlider(min=0, max=30, step=1, value=20, description='Right Boundary'),
         gap=FloatSlider(min=0.1, max=20, step=0.1, value=1, description='Gap'))


------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 22[0m
[1;32m     20[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m     21[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m---> 22[0m [38;5;28;01mfrom[39;00m [38;5;21;01mipywidgets[39;00m [38;5;28;01mimport[39;00m interact, FloatSlider
[1;32m     24[0m [38;5;66;03m# Function to update plot with boundaries[39;00m
[1;32m     25[0m [38;5;28;01mdef[39;00m [38;5;21mupdate_plot[39m(left_boundary, right_boundary, gap):
[1;32m     26[0m     [38;5;66;03m# Generate data points within the specified boundary[39;00m
[1;32m     27[0m     [38;5;66;03m# x = np.linspace(left_boundary, right_boundary, gap)[39;00m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'

